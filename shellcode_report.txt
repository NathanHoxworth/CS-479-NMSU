The first line of my code is just clearing %rax. 
Next, I load the string '/bin//sh' into $rdi using the hexadecimal for that string because it saved space and in reverse because it's little endian. 
Then shifted %rdi to the right by 8 bits to move the null byte to the end of the string 
and then I pushed the address of '/bin/sh' onto the stack to be used for the filename argument in the 'execve' call. 
Then I moved the address from the top of the stack to %rdi so that %rdi now contains '/bin/sh'. 
Now I clear %rax again so it can be used for the syscall 
and then moved the null pointer for 'envp' from the top of the stack into %rsi. 
Next, I moved the null pointer address for 'argv' into %rdx 
and then I loaded the value '0x3b' (in Linux, the syscall numebr for 'execve') into the lower 8 bits of %rax. 
Finally, I make the syscall using the paramaters I had set.


The total size of my code is 36 bytes: 
48 31 c0 48 bf 2f 2f 62 69 6e 2f 73 68 48 c1 ef 08 57 48 89 e7 48 31 c0 50 48 89 e6 50 48 89 e2 b0 3b 0f 05

